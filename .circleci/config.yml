version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1
  serverless-framework: circleci/serverless-framework@2.0
  aws-s3: circleci/aws-s3@3.0
  gradle: circleci/gradle@3.0.0

jobs:
  build:
    # Use "machine" instead of e.g. "docker" for better/faster results
    machine: true
    # Uses a "medium" sized machine - maybe increase this to "large" if you pay for CircleCI
    resource_class: medium
    working_directory: ~/gradle-ci-cd-demo
    environment:
      MAVEN_OPTS: -Xmx6400m
      # Set the GRAALVM_HOME env variable to the location where we will be installing GraalVM
      GRAALVM_HOME: /home/circleci/repo/.graalvm

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Download Dependencies
          command: gradle clean build
      - save_cache:
          paths:
            - ~/.gradle
          key:
      - run: v1-dependencies-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}

      - run:
          name: Install GraalVM
          command: curl https://github.com/oracle/graal/releases/download/vm-19.1.1/graalvm-ce-linux-amd64-19.1.1.tar.gz -O -J -L && tar xfz graalvm-ce-linux-amd64-19.1.1.tar.gz && mv graalvm-ce-19.1.1 .graalvm && rm graalvm-ce-linux-amd64-19.1.1.tar.gz
      - run:
          name: Install native-image
          command: $GRAALVM_HOME/bin/gu install native-image

      - run:
          name: Build (Native)
          command: ./gradlew build -Dquarkus.package.type=native -Dquarkus.native.container-build=true
          no_output_timeout: 30m
      - run:
          name: Verify (Native)
          command: ./gradlew verify
          no_output_timeout: 30m
        #command: ./gradlew build -Dquarkus.package.type=native -Dquarkus.native.container-build=trueZ
  #      - run:
  #          name: Deploy application
  #          command: sls deploy --stage pre

  deploy:
    docker:
      - image: 'cimg/python:3.6'
    steps:
      - checkout
      - aws-s3/copy:
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
          from: ./build/libs/**
          to: 'https://ci-cd-demo.s3.eu-west-1.amazonaws.com/builds/'

#  deploy:
#    executor: serverless-framework/default
#    steps:
#      - checkout
#      - aws-cli/setup
#      - serverless-framework/setup
#      - run:
#          command: serverless deploy -v
#          name: deploy
workflows:
  build-and-deploy:
    jobs:
      - build:
          name: build code
      - deploy:
          filters:
            branches:
              only:
                - main
          type: approval
          requires: [ build code ]